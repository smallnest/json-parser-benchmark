// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package goparser

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA957de00DecodeGithubComSmallnestJsonParserBenchmarkGoparser(in *jlexer.Lexer, out *TwitterEasyJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "search_metadata":
			easyjsonA957de00Decode(in, &out.SearchMetadata)
		case "statuses":
			if in.IsNull() {
				in.Skip()
				out.Statuses = nil
			} else {
				in.Delim('[')
				if out.Statuses == nil {
					if !in.IsDelim(']') {
						out.Statuses = make([]struct {
							Contributors interface{} `json:"contributors"`
							Coordinates  interface{} `json:"coordinates"`
							CreatedAt    string      `json:"created_at"`
							Entities     struct {
								Hashtags []struct {
									Indices []int64 `json:"indices"`
									Text    string  `json:"text"`
								} `json:"hashtags"`
								Urls         []interface{} `json:"urls"`
								UserMentions []interface{} `json:"user_mentions"`
							} `json:"entities"`
							Favorited            bool        `json:"favorited"`
							Geo                  interface{} `json:"geo"`
							ID                   int64       `json:"id"`
							IDStr                string      `json:"id_str"`
							InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
							InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
							InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
							InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
							InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
							Metadata             struct {
								IsoLanguageCode string `json:"iso_language_code"`
								ResultType      string `json:"result_type"`
							} `json:"metadata"`
							Place        interface{} `json:"place"`
							RetweetCount int64       `json:"retweet_count"`
							Retweeted    bool        `json:"retweeted"`
							Source       string      `json:"source"`
							Text         string      `json:"text"`
							Truncated    bool        `json:"truncated"`
							User         struct {
								ContributorsEnabled bool   `json:"contributors_enabled"`
								CreatedAt           string `json:"created_at"`
								DefaultProfile      bool   `json:"default_profile"`
								DefaultProfileImage bool   `json:"default_profile_image"`
								Description         string `json:"description"`
								Entities            struct {
									Description struct {
										Urls []interface{} `json:"urls"`
									} `json:"description"`
									URL struct {
										Urls []struct {
											ExpandedURL interface{} `json:"expanded_url"`
											Indices     []int64     `json:"indices"`
											URL         string      `json:"url"`
										} `json:"urls"`
									} `json:"url"`
								} `json:"entities"`
								FavouritesCount                int64       `json:"favourites_count"`
								FollowRequestSent              interface{} `json:"follow_request_sent"`
								FollowersCount                 int64       `json:"followers_count"`
								Following                      interface{} `json:"following"`
								FriendsCount                   int64       `json:"friends_count"`
								GeoEnabled                     bool        `json:"geo_enabled"`
								ID                             int64       `json:"id"`
								IDStr                          string      `json:"id_str"`
								IsTranslator                   bool        `json:"is_translator"`
								Lang                           string      `json:"lang"`
								ListedCount                    int64       `json:"listed_count"`
								Location                       string      `json:"location"`
								Name                           string      `json:"name"`
								Notifications                  interface{} `json:"notifications"`
								ProfileBackgroundColor         string      `json:"profile_background_color"`
								ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
								ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
								ProfileBackgroundTile          bool        `json:"profile_background_tile"`
								ProfileImageURL                string      `json:"profile_image_url"`
								ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
								ProfileLinkColor               string      `json:"profile_link_color"`
								ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
								ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
								ProfileTextColor               string      `json:"profile_text_color"`
								ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
								Protected                      bool        `json:"protected"`
								ScreenName                     string      `json:"screen_name"`
								ShowAllInlineMedia             bool        `json:"show_all_inline_media"`
								StatusesCount                  int64       `json:"statuses_count"`
								TimeZone                       string      `json:"time_zone"`
								URL                            string      `json:"url"`
								UtcOffset                      int64       `json:"utc_offset"`
								Verified                       bool        `json:"verified"`
							} `json:"user"`
						}, 0, 0)
					} else {
						out.Statuses = []struct {
							Contributors interface{} `json:"contributors"`
							Coordinates  interface{} `json:"coordinates"`
							CreatedAt    string      `json:"created_at"`
							Entities     struct {
								Hashtags []struct {
									Indices []int64 `json:"indices"`
									Text    string  `json:"text"`
								} `json:"hashtags"`
								Urls         []interface{} `json:"urls"`
								UserMentions []interface{} `json:"user_mentions"`
							} `json:"entities"`
							Favorited            bool        `json:"favorited"`
							Geo                  interface{} `json:"geo"`
							ID                   int64       `json:"id"`
							IDStr                string      `json:"id_str"`
							InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
							InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
							InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
							InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
							InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
							Metadata             struct {
								IsoLanguageCode string `json:"iso_language_code"`
								ResultType      string `json:"result_type"`
							} `json:"metadata"`
							Place        interface{} `json:"place"`
							RetweetCount int64       `json:"retweet_count"`
							Retweeted    bool        `json:"retweeted"`
							Source       string      `json:"source"`
							Text         string      `json:"text"`
							Truncated    bool        `json:"truncated"`
							User         struct {
								ContributorsEnabled bool   `json:"contributors_enabled"`
								CreatedAt           string `json:"created_at"`
								DefaultProfile      bool   `json:"default_profile"`
								DefaultProfileImage bool   `json:"default_profile_image"`
								Description         string `json:"description"`
								Entities            struct {
									Description struct {
										Urls []interface{} `json:"urls"`
									} `json:"description"`
									URL struct {
										Urls []struct {
											ExpandedURL interface{} `json:"expanded_url"`
											Indices     []int64     `json:"indices"`
											URL         string      `json:"url"`
										} `json:"urls"`
									} `json:"url"`
								} `json:"entities"`
								FavouritesCount                int64       `json:"favourites_count"`
								FollowRequestSent              interface{} `json:"follow_request_sent"`
								FollowersCount                 int64       `json:"followers_count"`
								Following                      interface{} `json:"following"`
								FriendsCount                   int64       `json:"friends_count"`
								GeoEnabled                     bool        `json:"geo_enabled"`
								ID                             int64       `json:"id"`
								IDStr                          string      `json:"id_str"`
								IsTranslator                   bool        `json:"is_translator"`
								Lang                           string      `json:"lang"`
								ListedCount                    int64       `json:"listed_count"`
								Location                       string      `json:"location"`
								Name                           string      `json:"name"`
								Notifications                  interface{} `json:"notifications"`
								ProfileBackgroundColor         string      `json:"profile_background_color"`
								ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
								ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
								ProfileBackgroundTile          bool        `json:"profile_background_tile"`
								ProfileImageURL                string      `json:"profile_image_url"`
								ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
								ProfileLinkColor               string      `json:"profile_link_color"`
								ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
								ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
								ProfileTextColor               string      `json:"profile_text_color"`
								ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
								Protected                      bool        `json:"protected"`
								ScreenName                     string      `json:"screen_name"`
								ShowAllInlineMedia             bool        `json:"show_all_inline_media"`
								StatusesCount                  int64       `json:"statuses_count"`
								TimeZone                       string      `json:"time_zone"`
								URL                            string      `json:"url"`
								UtcOffset                      int64       `json:"utc_offset"`
								Verified                       bool        `json:"verified"`
							} `json:"user"`
						}{}
					}
				} else {
					out.Statuses = (out.Statuses)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Contributors interface{} `json:"contributors"`
						Coordinates  interface{} `json:"coordinates"`
						CreatedAt    string      `json:"created_at"`
						Entities     struct {
							Hashtags []struct {
								Indices []int64 `json:"indices"`
								Text    string  `json:"text"`
							} `json:"hashtags"`
							Urls         []interface{} `json:"urls"`
							UserMentions []interface{} `json:"user_mentions"`
						} `json:"entities"`
						Favorited            bool        `json:"favorited"`
						Geo                  interface{} `json:"geo"`
						ID                   int64       `json:"id"`
						IDStr                string      `json:"id_str"`
						InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
						InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
						InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
						InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
						InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
						Metadata             struct {
							IsoLanguageCode string `json:"iso_language_code"`
							ResultType      string `json:"result_type"`
						} `json:"metadata"`
						Place        interface{} `json:"place"`
						RetweetCount int64       `json:"retweet_count"`
						Retweeted    bool        `json:"retweeted"`
						Source       string      `json:"source"`
						Text         string      `json:"text"`
						Truncated    bool        `json:"truncated"`
						User         struct {
							ContributorsEnabled bool   `json:"contributors_enabled"`
							CreatedAt           string `json:"created_at"`
							DefaultProfile      bool   `json:"default_profile"`
							DefaultProfileImage bool   `json:"default_profile_image"`
							Description         string `json:"description"`
							Entities            struct {
								Description struct {
									Urls []interface{} `json:"urls"`
								} `json:"description"`
								URL struct {
									Urls []struct {
										ExpandedURL interface{} `json:"expanded_url"`
										Indices     []int64     `json:"indices"`
										URL         string      `json:"url"`
									} `json:"urls"`
								} `json:"url"`
							} `json:"entities"`
							FavouritesCount                int64       `json:"favourites_count"`
							FollowRequestSent              interface{} `json:"follow_request_sent"`
							FollowersCount                 int64       `json:"followers_count"`
							Following                      interface{} `json:"following"`
							FriendsCount                   int64       `json:"friends_count"`
							GeoEnabled                     bool        `json:"geo_enabled"`
							ID                             int64       `json:"id"`
							IDStr                          string      `json:"id_str"`
							IsTranslator                   bool        `json:"is_translator"`
							Lang                           string      `json:"lang"`
							ListedCount                    int64       `json:"listed_count"`
							Location                       string      `json:"location"`
							Name                           string      `json:"name"`
							Notifications                  interface{} `json:"notifications"`
							ProfileBackgroundColor         string      `json:"profile_background_color"`
							ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
							ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
							ProfileBackgroundTile          bool        `json:"profile_background_tile"`
							ProfileImageURL                string      `json:"profile_image_url"`
							ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
							ProfileLinkColor               string      `json:"profile_link_color"`
							ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
							ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
							ProfileTextColor               string      `json:"profile_text_color"`
							ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
							Protected                      bool        `json:"protected"`
							ScreenName                     string      `json:"screen_name"`
							ShowAllInlineMedia             bool        `json:"show_all_inline_media"`
							StatusesCount                  int64       `json:"statuses_count"`
							TimeZone                       string      `json:"time_zone"`
							URL                            string      `json:"url"`
							UtcOffset                      int64       `json:"utc_offset"`
							Verified                       bool        `json:"verified"`
						} `json:"user"`
					}
					easyjsonA957de00Decode1(in, &v1)
					out.Statuses = append(out.Statuses, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00EncodeGithubComSmallnestJsonParserBenchmarkGoparser(out *jwriter.Writer, in TwitterEasyJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"search_metadata\":"
		out.RawString(prefix[1:])
		easyjsonA957de00Encode(out, in.SearchMetadata)
	}
	{
		const prefix string = ",\"statuses\":"
		out.RawString(prefix)
		if in.Statuses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Statuses {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonA957de00Encode1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TwitterEasyJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA957de00EncodeGithubComSmallnestJsonParserBenchmarkGoparser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TwitterEasyJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA957de00EncodeGithubComSmallnestJsonParserBenchmarkGoparser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TwitterEasyJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA957de00DecodeGithubComSmallnestJsonParserBenchmarkGoparser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TwitterEasyJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA957de00DecodeGithubComSmallnestJsonParserBenchmarkGoparser(l, v)
}
func easyjsonA957de00Decode1(in *jlexer.Lexer, out *struct {
	Contributors interface{} `json:"contributors"`
	Coordinates  interface{} `json:"coordinates"`
	CreatedAt    string      `json:"created_at"`
	Entities     struct {
		Hashtags []struct {
			Indices []int64 `json:"indices"`
			Text    string  `json:"text"`
		} `json:"hashtags"`
		Urls         []interface{} `json:"urls"`
		UserMentions []interface{} `json:"user_mentions"`
	} `json:"entities"`
	Favorited            bool        `json:"favorited"`
	Geo                  interface{} `json:"geo"`
	ID                   int64       `json:"id"`
	IDStr                string      `json:"id_str"`
	InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
	InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
	InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
	InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
	InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
	Metadata             struct {
		IsoLanguageCode string `json:"iso_language_code"`
		ResultType      string `json:"result_type"`
	} `json:"metadata"`
	Place        interface{} `json:"place"`
	RetweetCount int64       `json:"retweet_count"`
	Retweeted    bool        `json:"retweeted"`
	Source       string      `json:"source"`
	Text         string      `json:"text"`
	Truncated    bool        `json:"truncated"`
	User         struct {
		ContributorsEnabled bool   `json:"contributors_enabled"`
		CreatedAt           string `json:"created_at"`
		DefaultProfile      bool   `json:"default_profile"`
		DefaultProfileImage bool   `json:"default_profile_image"`
		Description         string `json:"description"`
		Entities            struct {
			Description struct {
				Urls []interface{} `json:"urls"`
			} `json:"description"`
			URL struct {
				Urls []struct {
					ExpandedURL interface{} `json:"expanded_url"`
					Indices     []int64     `json:"indices"`
					URL         string      `json:"url"`
				} `json:"urls"`
			} `json:"url"`
		} `json:"entities"`
		FavouritesCount                int64       `json:"favourites_count"`
		FollowRequestSent              interface{} `json:"follow_request_sent"`
		FollowersCount                 int64       `json:"followers_count"`
		Following                      interface{} `json:"following"`
		FriendsCount                   int64       `json:"friends_count"`
		GeoEnabled                     bool        `json:"geo_enabled"`
		ID                             int64       `json:"id"`
		IDStr                          string      `json:"id_str"`
		IsTranslator                   bool        `json:"is_translator"`
		Lang                           string      `json:"lang"`
		ListedCount                    int64       `json:"listed_count"`
		Location                       string      `json:"location"`
		Name                           string      `json:"name"`
		Notifications                  interface{} `json:"notifications"`
		ProfileBackgroundColor         string      `json:"profile_background_color"`
		ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
		ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
		ProfileBackgroundTile          bool        `json:"profile_background_tile"`
		ProfileImageURL                string      `json:"profile_image_url"`
		ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
		ProfileLinkColor               string      `json:"profile_link_color"`
		ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
		ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
		ProfileTextColor               string      `json:"profile_text_color"`
		ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
		Protected                      bool        `json:"protected"`
		ScreenName                     string      `json:"screen_name"`
		ShowAllInlineMedia             bool        `json:"show_all_inline_media"`
		StatusesCount                  int64       `json:"statuses_count"`
		TimeZone                       string      `json:"time_zone"`
		URL                            string      `json:"url"`
		UtcOffset                      int64       `json:"utc_offset"`
		Verified                       bool        `json:"verified"`
	} `json:"user"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contributors":
			if m, ok := out.Contributors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Contributors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Contributors = in.Interface()
			}
		case "coordinates":
			if m, ok := out.Coordinates.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Coordinates.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Coordinates = in.Interface()
			}
		case "created_at":
			out.CreatedAt = string(in.String())
		case "entities":
			easyjsonA957de00Decode2(in, &out.Entities)
		case "favorited":
			out.Favorited = bool(in.Bool())
		case "geo":
			if m, ok := out.Geo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Geo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Geo = in.Interface()
			}
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "in_reply_to_screen_name":
			if m, ok := out.InReplyToScreenName.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToScreenName.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToScreenName = in.Interface()
			}
		case "in_reply_to_status_id":
			if m, ok := out.InReplyToStatusID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToStatusID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToStatusID = in.Interface()
			}
		case "in_reply_to_status_id_str":
			if m, ok := out.InReplyToStatusIDStr.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToStatusIDStr.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToStatusIDStr = in.Interface()
			}
		case "in_reply_to_user_id":
			if m, ok := out.InReplyToUserID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToUserID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToUserID = in.Interface()
			}
		case "in_reply_to_user_id_str":
			if m, ok := out.InReplyToUserIDStr.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InReplyToUserIDStr.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InReplyToUserIDStr = in.Interface()
			}
		case "metadata":
			easyjsonA957de00Decode3(in, &out.Metadata)
		case "place":
			if m, ok := out.Place.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Place.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Place = in.Interface()
			}
		case "retweet_count":
			out.RetweetCount = int64(in.Int64())
		case "retweeted":
			out.Retweeted = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "truncated":
			out.Truncated = bool(in.Bool())
		case "user":
			easyjsonA957de00Decode4(in, &out.User)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode1(out *jwriter.Writer, in struct {
	Contributors interface{} `json:"contributors"`
	Coordinates  interface{} `json:"coordinates"`
	CreatedAt    string      `json:"created_at"`
	Entities     struct {
		Hashtags []struct {
			Indices []int64 `json:"indices"`
			Text    string  `json:"text"`
		} `json:"hashtags"`
		Urls         []interface{} `json:"urls"`
		UserMentions []interface{} `json:"user_mentions"`
	} `json:"entities"`
	Favorited            bool        `json:"favorited"`
	Geo                  interface{} `json:"geo"`
	ID                   int64       `json:"id"`
	IDStr                string      `json:"id_str"`
	InReplyToScreenName  interface{} `json:"in_reply_to_screen_name"`
	InReplyToStatusID    interface{} `json:"in_reply_to_status_id"`
	InReplyToStatusIDStr interface{} `json:"in_reply_to_status_id_str"`
	InReplyToUserID      interface{} `json:"in_reply_to_user_id"`
	InReplyToUserIDStr   interface{} `json:"in_reply_to_user_id_str"`
	Metadata             struct {
		IsoLanguageCode string `json:"iso_language_code"`
		ResultType      string `json:"result_type"`
	} `json:"metadata"`
	Place        interface{} `json:"place"`
	RetweetCount int64       `json:"retweet_count"`
	Retweeted    bool        `json:"retweeted"`
	Source       string      `json:"source"`
	Text         string      `json:"text"`
	Truncated    bool        `json:"truncated"`
	User         struct {
		ContributorsEnabled bool   `json:"contributors_enabled"`
		CreatedAt           string `json:"created_at"`
		DefaultProfile      bool   `json:"default_profile"`
		DefaultProfileImage bool   `json:"default_profile_image"`
		Description         string `json:"description"`
		Entities            struct {
			Description struct {
				Urls []interface{} `json:"urls"`
			} `json:"description"`
			URL struct {
				Urls []struct {
					ExpandedURL interface{} `json:"expanded_url"`
					Indices     []int64     `json:"indices"`
					URL         string      `json:"url"`
				} `json:"urls"`
			} `json:"url"`
		} `json:"entities"`
		FavouritesCount                int64       `json:"favourites_count"`
		FollowRequestSent              interface{} `json:"follow_request_sent"`
		FollowersCount                 int64       `json:"followers_count"`
		Following                      interface{} `json:"following"`
		FriendsCount                   int64       `json:"friends_count"`
		GeoEnabled                     bool        `json:"geo_enabled"`
		ID                             int64       `json:"id"`
		IDStr                          string      `json:"id_str"`
		IsTranslator                   bool        `json:"is_translator"`
		Lang                           string      `json:"lang"`
		ListedCount                    int64       `json:"listed_count"`
		Location                       string      `json:"location"`
		Name                           string      `json:"name"`
		Notifications                  interface{} `json:"notifications"`
		ProfileBackgroundColor         string      `json:"profile_background_color"`
		ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
		ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
		ProfileBackgroundTile          bool        `json:"profile_background_tile"`
		ProfileImageURL                string      `json:"profile_image_url"`
		ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
		ProfileLinkColor               string      `json:"profile_link_color"`
		ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
		ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
		ProfileTextColor               string      `json:"profile_text_color"`
		ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
		Protected                      bool        `json:"protected"`
		ScreenName                     string      `json:"screen_name"`
		ShowAllInlineMedia             bool        `json:"show_all_inline_media"`
		StatusesCount                  int64       `json:"statuses_count"`
		TimeZone                       string      `json:"time_zone"`
		URL                            string      `json:"url"`
		UtcOffset                      int64       `json:"utc_offset"`
		Verified                       bool        `json:"verified"`
	} `json:"user"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contributors\":"
		out.RawString(prefix[1:])
		if m, ok := in.Contributors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Contributors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Contributors))
		}
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if m, ok := in.Coordinates.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Coordinates.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Coordinates))
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		easyjsonA957de00Encode2(out, in.Entities)
	}
	{
		const prefix string = ",\"favorited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favorited))
	}
	{
		const prefix string = ",\"geo\":"
		out.RawString(prefix)
		if m, ok := in.Geo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Geo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Geo))
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"in_reply_to_screen_name\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToScreenName.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToScreenName.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToScreenName))
		}
	}
	{
		const prefix string = ",\"in_reply_to_status_id\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToStatusID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToStatusID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToStatusID))
		}
	}
	{
		const prefix string = ",\"in_reply_to_status_id_str\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToStatusIDStr.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToStatusIDStr.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToStatusIDStr))
		}
	}
	{
		const prefix string = ",\"in_reply_to_user_id\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToUserID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToUserID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToUserID))
		}
	}
	{
		const prefix string = ",\"in_reply_to_user_id_str\":"
		out.RawString(prefix)
		if m, ok := in.InReplyToUserIDStr.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InReplyToUserIDStr.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InReplyToUserIDStr))
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjsonA957de00Encode3(out, in.Metadata)
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		if m, ok := in.Place.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Place.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Place))
		}
	}
	{
		const prefix string = ",\"retweet_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.RetweetCount))
	}
	{
		const prefix string = ",\"retweeted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Retweeted))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Truncated))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjsonA957de00Encode4(out, in.User)
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode4(in *jlexer.Lexer, out *struct {
	ContributorsEnabled bool   `json:"contributors_enabled"`
	CreatedAt           string `json:"created_at"`
	DefaultProfile      bool   `json:"default_profile"`
	DefaultProfileImage bool   `json:"default_profile_image"`
	Description         string `json:"description"`
	Entities            struct {
		Description struct {
			Urls []interface{} `json:"urls"`
		} `json:"description"`
		URL struct {
			Urls []struct {
				ExpandedURL interface{} `json:"expanded_url"`
				Indices     []int64     `json:"indices"`
				URL         string      `json:"url"`
			} `json:"urls"`
		} `json:"url"`
	} `json:"entities"`
	FavouritesCount                int64       `json:"favourites_count"`
	FollowRequestSent              interface{} `json:"follow_request_sent"`
	FollowersCount                 int64       `json:"followers_count"`
	Following                      interface{} `json:"following"`
	FriendsCount                   int64       `json:"friends_count"`
	GeoEnabled                     bool        `json:"geo_enabled"`
	ID                             int64       `json:"id"`
	IDStr                          string      `json:"id_str"`
	IsTranslator                   bool        `json:"is_translator"`
	Lang                           string      `json:"lang"`
	ListedCount                    int64       `json:"listed_count"`
	Location                       string      `json:"location"`
	Name                           string      `json:"name"`
	Notifications                  interface{} `json:"notifications"`
	ProfileBackgroundColor         string      `json:"profile_background_color"`
	ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
	ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
	ProfileBackgroundTile          bool        `json:"profile_background_tile"`
	ProfileImageURL                string      `json:"profile_image_url"`
	ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
	ProfileLinkColor               string      `json:"profile_link_color"`
	ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
	ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
	ProfileTextColor               string      `json:"profile_text_color"`
	ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
	Protected                      bool        `json:"protected"`
	ScreenName                     string      `json:"screen_name"`
	ShowAllInlineMedia             bool        `json:"show_all_inline_media"`
	StatusesCount                  int64       `json:"statuses_count"`
	TimeZone                       string      `json:"time_zone"`
	URL                            string      `json:"url"`
	UtcOffset                      int64       `json:"utc_offset"`
	Verified                       bool        `json:"verified"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contributors_enabled":
			out.ContributorsEnabled = bool(in.Bool())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "default_profile":
			out.DefaultProfile = bool(in.Bool())
		case "default_profile_image":
			out.DefaultProfileImage = bool(in.Bool())
		case "description":
			out.Description = string(in.String())
		case "entities":
			easyjsonA957de00Decode5(in, &out.Entities)
		case "favourites_count":
			out.FavouritesCount = int64(in.Int64())
		case "follow_request_sent":
			if m, ok := out.FollowRequestSent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FollowRequestSent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FollowRequestSent = in.Interface()
			}
		case "followers_count":
			out.FollowersCount = int64(in.Int64())
		case "following":
			if m, ok := out.Following.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Following.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Following = in.Interface()
			}
		case "friends_count":
			out.FriendsCount = int64(in.Int64())
		case "geo_enabled":
			out.GeoEnabled = bool(in.Bool())
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "is_translator":
			out.IsTranslator = bool(in.Bool())
		case "lang":
			out.Lang = string(in.String())
		case "listed_count":
			out.ListedCount = int64(in.Int64())
		case "location":
			out.Location = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "notifications":
			if m, ok := out.Notifications.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Notifications.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Notifications = in.Interface()
			}
		case "profile_background_color":
			out.ProfileBackgroundColor = string(in.String())
		case "profile_background_image_url":
			out.ProfileBackgroundImageURL = string(in.String())
		case "profile_background_image_url_https":
			out.ProfileBackgroundImageURLHTTPS = string(in.String())
		case "profile_background_tile":
			out.ProfileBackgroundTile = bool(in.Bool())
		case "profile_image_url":
			out.ProfileImageURL = string(in.String())
		case "profile_image_url_https":
			out.ProfileImageURLHTTPS = string(in.String())
		case "profile_link_color":
			out.ProfileLinkColor = string(in.String())
		case "profile_sidebar_border_color":
			out.ProfileSidebarBorderColor = string(in.String())
		case "profile_sidebar_fill_color":
			out.ProfileSidebarFillColor = string(in.String())
		case "profile_text_color":
			out.ProfileTextColor = string(in.String())
		case "profile_use_background_image":
			out.ProfileUseBackgroundImage = bool(in.Bool())
		case "protected":
			out.Protected = bool(in.Bool())
		case "screen_name":
			out.ScreenName = string(in.String())
		case "show_all_inline_media":
			out.ShowAllInlineMedia = bool(in.Bool())
		case "statuses_count":
			out.StatusesCount = int64(in.Int64())
		case "time_zone":
			out.TimeZone = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "utc_offset":
			out.UtcOffset = int64(in.Int64())
		case "verified":
			out.Verified = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode4(out *jwriter.Writer, in struct {
	ContributorsEnabled bool   `json:"contributors_enabled"`
	CreatedAt           string `json:"created_at"`
	DefaultProfile      bool   `json:"default_profile"`
	DefaultProfileImage bool   `json:"default_profile_image"`
	Description         string `json:"description"`
	Entities            struct {
		Description struct {
			Urls []interface{} `json:"urls"`
		} `json:"description"`
		URL struct {
			Urls []struct {
				ExpandedURL interface{} `json:"expanded_url"`
				Indices     []int64     `json:"indices"`
				URL         string      `json:"url"`
			} `json:"urls"`
		} `json:"url"`
	} `json:"entities"`
	FavouritesCount                int64       `json:"favourites_count"`
	FollowRequestSent              interface{} `json:"follow_request_sent"`
	FollowersCount                 int64       `json:"followers_count"`
	Following                      interface{} `json:"following"`
	FriendsCount                   int64       `json:"friends_count"`
	GeoEnabled                     bool        `json:"geo_enabled"`
	ID                             int64       `json:"id"`
	IDStr                          string      `json:"id_str"`
	IsTranslator                   bool        `json:"is_translator"`
	Lang                           string      `json:"lang"`
	ListedCount                    int64       `json:"listed_count"`
	Location                       string      `json:"location"`
	Name                           string      `json:"name"`
	Notifications                  interface{} `json:"notifications"`
	ProfileBackgroundColor         string      `json:"profile_background_color"`
	ProfileBackgroundImageURL      string      `json:"profile_background_image_url"`
	ProfileBackgroundImageURLHTTPS string      `json:"profile_background_image_url_https"`
	ProfileBackgroundTile          bool        `json:"profile_background_tile"`
	ProfileImageURL                string      `json:"profile_image_url"`
	ProfileImageURLHTTPS           string      `json:"profile_image_url_https"`
	ProfileLinkColor               string      `json:"profile_link_color"`
	ProfileSidebarBorderColor      string      `json:"profile_sidebar_border_color"`
	ProfileSidebarFillColor        string      `json:"profile_sidebar_fill_color"`
	ProfileTextColor               string      `json:"profile_text_color"`
	ProfileUseBackgroundImage      bool        `json:"profile_use_background_image"`
	Protected                      bool        `json:"protected"`
	ScreenName                     string      `json:"screen_name"`
	ShowAllInlineMedia             bool        `json:"show_all_inline_media"`
	StatusesCount                  int64       `json:"statuses_count"`
	TimeZone                       string      `json:"time_zone"`
	URL                            string      `json:"url"`
	UtcOffset                      int64       `json:"utc_offset"`
	Verified                       bool        `json:"verified"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contributors_enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.ContributorsEnabled))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"default_profile\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfile))
	}
	{
		const prefix string = ",\"default_profile_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfileImage))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		easyjsonA957de00Encode5(out, in.Entities)
	}
	{
		const prefix string = ",\"favourites_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.FavouritesCount))
	}
	{
		const prefix string = ",\"follow_request_sent\":"
		out.RawString(prefix)
		if m, ok := in.FollowRequestSent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FollowRequestSent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FollowRequestSent))
		}
	}
	{
		const prefix string = ",\"followers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.FollowersCount))
	}
	{
		const prefix string = ",\"following\":"
		out.RawString(prefix)
		if m, ok := in.Following.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Following.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Following))
		}
	}
	{
		const prefix string = ",\"friends_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.FriendsCount))
	}
	{
		const prefix string = ",\"geo_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.GeoEnabled))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"is_translator\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTranslator))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"listed_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ListedCount))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		if m, ok := in.Notifications.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Notifications.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Notifications))
		}
	}
	{
		const prefix string = ",\"profile_background_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundColor))
	}
	{
		const prefix string = ",\"profile_background_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURL))
	}
	{
		const prefix string = ",\"profile_background_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_background_tile\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileBackgroundTile))
	}
	{
		const prefix string = ",\"profile_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURL))
	}
	{
		const prefix string = ",\"profile_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_link_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileLinkColor))
	}
	{
		const prefix string = ",\"profile_sidebar_border_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarBorderColor))
	}
	{
		const prefix string = ",\"profile_sidebar_fill_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarFillColor))
	}
	{
		const prefix string = ",\"profile_text_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileTextColor))
	}
	{
		const prefix string = ",\"profile_use_background_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileUseBackgroundImage))
	}
	{
		const prefix string = ",\"protected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protected))
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"show_all_inline_media\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowAllInlineMedia))
	}
	{
		const prefix string = ",\"statuses_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.StatusesCount))
	}
	{
		const prefix string = ",\"time_zone\":"
		out.RawString(prefix)
		out.String(string(in.TimeZone))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"utc_offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.UtcOffset))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Verified))
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode5(in *jlexer.Lexer, out *struct {
	Description struct {
		Urls []interface{} `json:"urls"`
	} `json:"description"`
	URL struct {
		Urls []struct {
			ExpandedURL interface{} `json:"expanded_url"`
			Indices     []int64     `json:"indices"`
			URL         string      `json:"url"`
		} `json:"urls"`
	} `json:"url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			easyjsonA957de00Decode6(in, &out.Description)
		case "url":
			easyjsonA957de00Decode7(in, &out.URL)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode5(out *jwriter.Writer, in struct {
	Description struct {
		Urls []interface{} `json:"urls"`
	} `json:"description"`
	URL struct {
		Urls []struct {
			ExpandedURL interface{} `json:"expanded_url"`
			Indices     []int64     `json:"indices"`
			URL         string      `json:"url"`
		} `json:"urls"`
	} `json:"url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		easyjsonA957de00Encode6(out, in.Description)
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		easyjsonA957de00Encode7(out, in.URL)
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode7(in *jlexer.Lexer, out *struct {
	Urls []struct {
		ExpandedURL interface{} `json:"expanded_url"`
		Indices     []int64     `json:"indices"`
		URL         string      `json:"url"`
	} `json:"urls"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]struct {
							ExpandedURL interface{} `json:"expanded_url"`
							Indices     []int64     `json:"indices"`
							URL         string      `json:"url"`
						}, 0, 1)
					} else {
						out.Urls = []struct {
							ExpandedURL interface{} `json:"expanded_url"`
							Indices     []int64     `json:"indices"`
							URL         string      `json:"url"`
						}{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						ExpandedURL interface{} `json:"expanded_url"`
						Indices     []int64     `json:"indices"`
						URL         string      `json:"url"`
					}
					easyjsonA957de00Decode8(in, &v4)
					out.Urls = append(out.Urls, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode7(out *jwriter.Writer, in struct {
	Urls []struct {
		ExpandedURL interface{} `json:"expanded_url"`
		Indices     []int64     `json:"indices"`
		URL         string      `json:"url"`
	} `json:"urls"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix[1:])
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Urls {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonA957de00Encode8(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode8(in *jlexer.Lexer, out *struct {
	ExpandedURL interface{} `json:"expanded_url"`
	Indices     []int64     `json:"indices"`
	URL         string      `json:"url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expanded_url":
			if m, ok := out.ExpandedURL.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ExpandedURL.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ExpandedURL = in.Interface()
			}
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int64, 0, 8)
					} else {
						out.Indices = []int64{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int64
					v7 = int64(in.Int64())
					out.Indices = append(out.Indices, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode8(out *jwriter.Writer, in struct {
	ExpandedURL interface{} `json:"expanded_url"`
	Indices     []int64     `json:"indices"`
	URL         string      `json:"url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"expanded_url\":"
		out.RawString(prefix[1:])
		if m, ok := in.ExpandedURL.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ExpandedURL.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ExpandedURL))
		}
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Indices {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode6(in *jlexer.Lexer, out *struct {
	Urls []interface{} `json:"urls"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]interface{}, 0, 4)
					} else {
						out.Urls = []interface{}{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v10 interface{}
					if m, ok := v10.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v10.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v10 = in.Interface()
					}
					out.Urls = append(out.Urls, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode6(out *jwriter.Writer, in struct {
	Urls []interface{} `json:"urls"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix[1:])
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Urls {
				if v11 > 0 {
					out.RawByte(',')
				}
				if m, ok := v12.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode3(in *jlexer.Lexer, out *struct {
	IsoLanguageCode string `json:"iso_language_code"`
	ResultType      string `json:"result_type"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "iso_language_code":
			out.IsoLanguageCode = string(in.String())
		case "result_type":
			out.ResultType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode3(out *jwriter.Writer, in struct {
	IsoLanguageCode string `json:"iso_language_code"`
	ResultType      string `json:"result_type"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"iso_language_code\":"
		out.RawString(prefix[1:])
		out.String(string(in.IsoLanguageCode))
	}
	{
		const prefix string = ",\"result_type\":"
		out.RawString(prefix)
		out.String(string(in.ResultType))
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode2(in *jlexer.Lexer, out *struct {
	Hashtags []struct {
		Indices []int64 `json:"indices"`
		Text    string  `json:"text"`
	} `json:"hashtags"`
	Urls         []interface{} `json:"urls"`
	UserMentions []interface{} `json:"user_mentions"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hashtags":
			if in.IsNull() {
				in.Skip()
				out.Hashtags = nil
			} else {
				in.Delim('[')
				if out.Hashtags == nil {
					if !in.IsDelim(']') {
						out.Hashtags = make([]struct {
							Indices []int64 `json:"indices"`
							Text    string  `json:"text"`
						}, 0, 1)
					} else {
						out.Hashtags = []struct {
							Indices []int64 `json:"indices"`
							Text    string  `json:"text"`
						}{}
					}
				} else {
					out.Hashtags = (out.Hashtags)[:0]
				}
				for !in.IsDelim(']') {
					var v13 struct {
						Indices []int64 `json:"indices"`
						Text    string  `json:"text"`
					}
					easyjsonA957de00Decode9(in, &v13)
					out.Hashtags = append(out.Hashtags, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]interface{}, 0, 4)
					} else {
						out.Urls = []interface{}{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v14 interface{}
					if m, ok := v14.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v14.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v14 = in.Interface()
					}
					out.Urls = append(out.Urls, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_mentions":
			if in.IsNull() {
				in.Skip()
				out.UserMentions = nil
			} else {
				in.Delim('[')
				if out.UserMentions == nil {
					if !in.IsDelim(']') {
						out.UserMentions = make([]interface{}, 0, 4)
					} else {
						out.UserMentions = []interface{}{}
					}
				} else {
					out.UserMentions = (out.UserMentions)[:0]
				}
				for !in.IsDelim(']') {
					var v15 interface{}
					if m, ok := v15.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v15.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v15 = in.Interface()
					}
					out.UserMentions = append(out.UserMentions, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode2(out *jwriter.Writer, in struct {
	Hashtags []struct {
		Indices []int64 `json:"indices"`
		Text    string  `json:"text"`
	} `json:"hashtags"`
	Urls         []interface{} `json:"urls"`
	UserMentions []interface{} `json:"user_mentions"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix[1:])
		if in.Hashtags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Hashtags {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjsonA957de00Encode9(out, v17)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Urls {
				if v18 > 0 {
					out.RawByte(',')
				}
				if m, ok := v19.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v19.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v19))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_mentions\":"
		out.RawString(prefix)
		if in.UserMentions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.UserMentions {
				if v20 > 0 {
					out.RawByte(',')
				}
				if m, ok := v21.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v21.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v21))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode9(in *jlexer.Lexer, out *struct {
	Indices []int64 `json:"indices"`
	Text    string  `json:"text"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int64, 0, 8)
					} else {
						out.Indices = []int64{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v22 int64
					v22 = int64(in.Int64())
					out.Indices = append(out.Indices, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode9(out *jwriter.Writer, in struct {
	Indices []int64 `json:"indices"`
	Text    string  `json:"text"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix[1:])
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Indices {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
func easyjsonA957de00Decode(in *jlexer.Lexer, out *struct {
	CompletedIn float64 `json:"completed_in"`
	Count       int64   `json:"count"`
	MaxID       int64   `json:"max_id"`
	MaxIDStr    string  `json:"max_id_str"`
	NextResults string  `json:"next_results"`
	Query       string  `json:"query"`
	RefreshURL  string  `json:"refresh_url"`
	SinceID     int64   `json:"since_id"`
	SinceIDStr  string  `json:"since_id_str"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "completed_in":
			out.CompletedIn = float64(in.Float64())
		case "count":
			out.Count = int64(in.Int64())
		case "max_id":
			out.MaxID = int64(in.Int64())
		case "max_id_str":
			out.MaxIDStr = string(in.String())
		case "next_results":
			out.NextResults = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "refresh_url":
			out.RefreshURL = string(in.String())
		case "since_id":
			out.SinceID = int64(in.Int64())
		case "since_id_str":
			out.SinceIDStr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA957de00Encode(out *jwriter.Writer, in struct {
	CompletedIn float64 `json:"completed_in"`
	Count       int64   `json:"count"`
	MaxID       int64   `json:"max_id"`
	MaxIDStr    string  `json:"max_id_str"`
	NextResults string  `json:"next_results"`
	Query       string  `json:"query"`
	RefreshURL  string  `json:"refresh_url"`
	SinceID     int64   `json:"since_id"`
	SinceIDStr  string  `json:"since_id_str"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"completed_in\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CompletedIn))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"max_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxID))
	}
	{
		const prefix string = ",\"max_id_str\":"
		out.RawString(prefix)
		out.String(string(in.MaxIDStr))
	}
	{
		const prefix string = ",\"next_results\":"
		out.RawString(prefix)
		out.String(string(in.NextResults))
	}
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"refresh_url\":"
		out.RawString(prefix)
		out.String(string(in.RefreshURL))
	}
	{
		const prefix string = ",\"since_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.SinceID))
	}
	{
		const prefix string = ",\"since_id_str\":"
		out.RawString(prefix)
		out.String(string(in.SinceIDStr))
	}
	out.RawByte('}')
}
